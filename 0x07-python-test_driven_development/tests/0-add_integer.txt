doctest_in_help.txt
===============================
 How to Use doctest_in_help.py
===============================

This library is very simple, since it only has one function called
``add_integer()``.

Numbers
=======

::

    >>> add_integer = __import__('0-add_integer').add_integer 
    >>> add_integer(2, 3)
    5

It also works with floating-point values.

::

    >>> add_integer(2.0, 3)
    5

::

    >>> add_integer(2, -3)
    -1

The function also works with floating-point values.

::

    >>> add_integer(2.0, 3.0)
    5

::

    >>> add_integer(-2.9, -0.2)
    -2

::

    >>> add_integer(2)
    100

Non-Numbers
===========

::

    >>> add_integer('a', 3)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(['A', 'B', 'C'], 2)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
